/* tslint:disable */
/* eslint-disable */
/**
 * CDM-DisasterRecovery
 * 설명추가
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  RecoveryGroupsGroupIdDelete200Response,
  RecoveryTemplatesGet200Response,
  RecoveryTemplatesPost201Response,
  RecoveryTemplatesPostRequest,
} from '../models/index';
import {
    RecoveryGroupsGroupIdDelete200ResponseFromJSON,
    RecoveryGroupsGroupIdDelete200ResponseToJSON,
    RecoveryTemplatesGet200ResponseFromJSON,
    RecoveryTemplatesGet200ResponseToJSON,
    RecoveryTemplatesPost201ResponseFromJSON,
    RecoveryTemplatesPost201ResponseToJSON,
    RecoveryTemplatesPostRequestFromJSON,
    RecoveryTemplatesPostRequestToJSON,
} from '../models/index';

export interface RecoveryTemplatesGetRequest {
    limit?: number;
    offset?: number;
    name?: string;
    owner_group_id?: number;
}

export interface RecoveryTemplatesPostOperationRequest {
    recovery_templates_post_request?: RecoveryTemplatesPostRequest;
}

export interface RecoveryTemplatesTemplateIdDeleteRequest {
    template_id: number;
}

export interface RecoveryTemplatesTemplateIdGetRequest {
    template_id: number;
}

/**
 * InstanceTemplateApi - interface
 * 
 * @export
 * @interface InstanceTemplateApiInterface
 */
export interface InstanceTemplateApiInterface {
    /**
     * 설명추가
     * @summary 인스턴스 템플릿 목록 조회
     * @param {number} [limit] 한 페이지에 표시할 항목 개수
     * @param {number} [offset] 페이지에 표시할 항목 인덱스
     * @param {} [UNKNOWN_PARAMETER_NAME] 
     * @param {} [UNKNOWN_PARAMETER_NAME2] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstanceTemplateApiInterface
     */
    recoveryTemplatesGetRaw(requestParameters: RecoveryTemplatesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RecoveryTemplatesGet200Response>>;

    /**
     * 설명추가
     * 인스턴스 템플릿 목록 조회
     */
    recoveryTemplatesGet(requestParameters: RecoveryTemplatesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RecoveryTemplatesGet200Response>;

    /**
     * 설명추가
     * @summary 인스턴스 템플릿 등록
     * @param {RecoveryTemplatesPostRequest} [recovery_templates_post_request] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstanceTemplateApiInterface
     */
    recoveryTemplatesPostRaw(requestParameters: RecoveryTemplatesPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RecoveryTemplatesPost201Response>>;

    /**
     * 설명추가
     * 인스턴스 템플릿 등록
     */
    recoveryTemplatesPost(requestParameters: RecoveryTemplatesPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RecoveryTemplatesPost201Response>;

    /**
     * 설명추가
     * @summary 인스턴스 템플릿 삭제
     * @param {number} template_id 인스턴스 템플릿의 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstanceTemplateApiInterface
     */
    recoveryTemplatesTemplateIdDeleteRaw(requestParameters: RecoveryTemplatesTemplateIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RecoveryGroupsGroupIdDelete200Response>>;

    /**
     * 설명추가
     * 인스턴스 템플릿 삭제
     */
    recoveryTemplatesTemplateIdDelete(requestParameters: RecoveryTemplatesTemplateIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RecoveryGroupsGroupIdDelete200Response>;

    /**
     * 설명추가
     * @summary 인스턴스 템플릿 조회
     * @param {number} template_id 인스턴스 템플릿의 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstanceTemplateApiInterface
     */
    recoveryTemplatesTemplateIdGetRaw(requestParameters: RecoveryTemplatesTemplateIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RecoveryTemplatesPost201Response>>;

    /**
     * 설명추가
     * 인스턴스 템플릿 조회
     */
    recoveryTemplatesTemplateIdGet(requestParameters: RecoveryTemplatesTemplateIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RecoveryTemplatesPost201Response>;

}

/**
 * 
 */
export class InstanceTemplateApi extends runtime.BaseAPI implements InstanceTemplateApiInterface {

    /**
     * 설명추가
     * 인스턴스 템플릿 목록 조회
     */
    async recoveryTemplatesGetRaw(requestParameters: RecoveryTemplatesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RecoveryTemplatesGet200Response>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/recovery/templates`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RecoveryTemplatesGet200ResponseFromJSON(jsonValue));
    }

    /**
     * 설명추가
     * 인스턴스 템플릿 목록 조회
     */
    async recoveryTemplatesGet(requestParameters: RecoveryTemplatesGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RecoveryTemplatesGet200Response> {
        const response = await this.recoveryTemplatesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 설명추가
     * 인스턴스 템플릿 등록
     */
    async recoveryTemplatesPostRaw(requestParameters: RecoveryTemplatesPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RecoveryTemplatesPost201Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/recovery/templates`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RecoveryTemplatesPostRequestToJSON(requestParameters.recovery_templates_post_request),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RecoveryTemplatesPost201ResponseFromJSON(jsonValue));
    }

    /**
     * 설명추가
     * 인스턴스 템플릿 등록
     */
    async recoveryTemplatesPost(requestParameters: RecoveryTemplatesPostOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RecoveryTemplatesPost201Response> {
        const response = await this.recoveryTemplatesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 설명추가
     * 인스턴스 템플릿 삭제
     */
    async recoveryTemplatesTemplateIdDeleteRaw(requestParameters: RecoveryTemplatesTemplateIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RecoveryGroupsGroupIdDelete200Response>> {
        if (requestParameters.template_id === null || requestParameters.template_id === undefined) {
            throw new runtime.RequiredError('template_id','Required parameter requestParameters.template_id was null or undefined when calling recoveryTemplatesTemplateIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/recovery/templates/{template_id}`.replace(`{${"template_id"}}`, encodeURIComponent(String(requestParameters.template_id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RecoveryGroupsGroupIdDelete200ResponseFromJSON(jsonValue));
    }

    /**
     * 설명추가
     * 인스턴스 템플릿 삭제
     */
    async recoveryTemplatesTemplateIdDelete(requestParameters: RecoveryTemplatesTemplateIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RecoveryGroupsGroupIdDelete200Response> {
        const response = await this.recoveryTemplatesTemplateIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 설명추가
     * 인스턴스 템플릿 조회
     */
    async recoveryTemplatesTemplateIdGetRaw(requestParameters: RecoveryTemplatesTemplateIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RecoveryTemplatesPost201Response>> {
        if (requestParameters.template_id === null || requestParameters.template_id === undefined) {
            throw new runtime.RequiredError('template_id','Required parameter requestParameters.template_id was null or undefined when calling recoveryTemplatesTemplateIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/recovery/templates/{template_id}`.replace(`{${"template_id"}}`, encodeURIComponent(String(requestParameters.template_id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RecoveryTemplatesPost201ResponseFromJSON(jsonValue));
    }

    /**
     * 설명추가
     * 인스턴스 템플릿 조회
     */
    async recoveryTemplatesTemplateIdGet(requestParameters: RecoveryTemplatesTemplateIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RecoveryTemplatesPost201Response> {
        const response = await this.recoveryTemplatesTemplateIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
