/* tslint:disable */
/* eslint-disable */
/**
 * CDM-DisasterRecovery
 * 설명추가
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Message } from './Message';
import {
    MessageFromJSON,
    MessageFromJSONTyped,
    MessageToJSON,
} from './Message';

/**
 * 
 * @export
 * @interface AbnormalStateReasons
 */
export interface AbnormalStateReasons {
    /**
     * 
     * @type {Array<Message>}
     * @memberof AbnormalStateReasons
     */
    prepare?: Array<Message>;
    /**
     * 
     * @type {Array<Message>}
     * @memberof AbnormalStateReasons
     */
    warning?: Array<Message>;
    /**
     * 
     * @type {Array<Message>}
     * @memberof AbnormalStateReasons
     */
    critical?: Array<Message>;
    /**
     * 
     * @type {Array<Message>}
     * @memberof AbnormalStateReasons
     */
    emergency?: Array<Message>;
}

/**
 * Check if a given object implements the AbnormalStateReasons interface.
 */
export function instanceOfAbnormalStateReasons(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function AbnormalStateReasonsFromJSON(json: any): AbnormalStateReasons {
    return AbnormalStateReasonsFromJSONTyped(json, false);
}

export function AbnormalStateReasonsFromJSONTyped(json: any, ignoreDiscriminator: boolean): AbnormalStateReasons {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'prepare': !exists(json, 'prepare') ? undefined : ((json['prepare'] as Array<any>).map(MessageFromJSON)),
        'warning': !exists(json, 'warning') ? undefined : ((json['warning'] as Array<any>).map(MessageFromJSON)),
        'critical': !exists(json, 'critical') ? undefined : ((json['critical'] as Array<any>).map(MessageFromJSON)),
        'emergency': !exists(json, 'emergency') ? undefined : ((json['emergency'] as Array<any>).map(MessageFromJSON)),
    };
}

export function AbnormalStateReasonsToJSON(value?: AbnormalStateReasons | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'prepare': value.prepare === undefined ? undefined : ((value.prepare as Array<any>).map(MessageToJSON)),
        'warning': value.warning === undefined ? undefined : ((value.warning as Array<any>).map(MessageToJSON)),
        'critical': value.critical === undefined ? undefined : ((value.critical as Array<any>).map(MessageToJSON)),
        'emergency': value.emergency === undefined ? undefined : ((value.emergency as Array<any>).map(MessageToJSON)),
    };
}

