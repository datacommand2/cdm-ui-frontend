/* tslint:disable */
/* eslint-disable */
/**
 * CDM-DisasterRecovery
 * 설명추가
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ClusterPermission } from './ClusterPermission';
import {
    ClusterPermissionFromJSON,
    ClusterPermissionFromJSONTyped,
    ClusterPermissionToJSON,
} from './ClusterPermission';
import type { UserGroup } from './UserGroup';
import {
    UserGroupFromJSON,
    UserGroupFromJSONTyped,
    UserGroupToJSON,
} from './UserGroup';

/**
 * 클러스터
 * @export
 * @interface Cluster
 */
export interface Cluster {
    /**
     * 클러스터의 ID
     * @type {number}
     * @memberof Cluster
     */
    id?: number;
    /**
     * 
     * @type {UserGroup}
     * @memberof Cluster
     */
    owner_group?: UserGroup;
    /**
     * 
     * @type {Array<ClusterPermission>}
     * @memberof Cluster
     */
    permissions?: Array<ClusterPermission>;
    /**
     * 클러스터의 이름
     * @type {string}
     * @memberof Cluster
     */
    name?: string;
    /**
     * 비고
     * @type {string}
     * @memberof Cluster
     */
    remarks?: string;
    /**
     * 클러스터의 종류
     * @type {string}
     * @memberof Cluster
     */
    type_code?: ClusterTypeCodeEnum;
    /**
     * 클러스터의 API Server URL
     * @type {string}
     * @memberof Cluster
     */
    api_server_url?: string;
    /**
     * 클러스터의 API Credential의 암호문
     * ## Openstack
     * **password authentication:**
     * ```json
     * {
     *   "methods": ["password"],
     *   "password": {
     *     "user": {
     *       "name": "admin",
     *       "domain": {
     *         "name": "admin"
     *       },
     *       "password": "password"
     *     }
     *   }
     * }
     * ```
     * 
     * @type {string}
     * @memberof Cluster
     */
    credential?: string;
    /**
     * 클러스터의 상태 코드
     * @type {string}
     * @memberof Cluster
     */
    state_code?: ClusterStateCodeEnum;
    /**
     * 클러스터 등록 일시 (Timestamp)
     * @type {number}
     * @memberof Cluster
     */
    created_at?: number;
    /**
     * 클러스터 최종 수정 일시 (Timestamp)
     * @type {number}
     * @memberof Cluster
     */
    updated_at?: number;
    /**
     * 클러스터 최종 동기화 일시 (Timestamp)
     * @type {number}
     * @memberof Cluster
     */
    synchronized_at?: number;
}


/**
 * @export
 */
export const ClusterTypeCodeEnum = {
    openstack: 'cluster.type.openstack',
    openshift: 'cluster.type.openshift',
    kubernetes: 'cluster.type.kubernetes',
    vmware: 'cluster.type.vmware'
} as const;
export type ClusterTypeCodeEnum = typeof ClusterTypeCodeEnum[keyof typeof ClusterTypeCodeEnum];

/**
 * @export
 */
export const ClusterStateCodeEnum = {
    active: 'cluster.state.active',
    inactive: 'cluster.state.inactive'
} as const;
export type ClusterStateCodeEnum = typeof ClusterStateCodeEnum[keyof typeof ClusterStateCodeEnum];


/**
 * Check if a given object implements the Cluster interface.
 */
export function instanceOfCluster(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ClusterFromJSON(json: any): Cluster {
    return ClusterFromJSONTyped(json, false);
}

export function ClusterFromJSONTyped(json: any, ignoreDiscriminator: boolean): Cluster {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'owner_group': !exists(json, 'owner_group') ? undefined : UserGroupFromJSON(json['owner_group']),
        'permissions': !exists(json, 'permissions') ? undefined : ((json['permissions'] as Array<any>).map(ClusterPermissionFromJSON)),
        'name': !exists(json, 'name') ? undefined : json['name'],
        'remarks': !exists(json, 'remarks') ? undefined : json['remarks'],
        'type_code': !exists(json, 'type_code') ? undefined : json['type_code'],
        'api_server_url': !exists(json, 'api_server_url') ? undefined : json['api_server_url'],
        'credential': !exists(json, 'credential') ? undefined : json['credential'],
        'state_code': !exists(json, 'state_code') ? undefined : json['state_code'],
        'created_at': !exists(json, 'created_at') ? undefined : json['created_at'],
        'updated_at': !exists(json, 'updated_at') ? undefined : json['updated_at'],
        'synchronized_at': !exists(json, 'synchronized_at') ? undefined : json['synchronized_at'],
    };
}

export function ClusterToJSON(value?: Cluster | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'owner_group': UserGroupToJSON(value.owner_group),
        'permissions': value.permissions === undefined ? undefined : ((value.permissions as Array<any>).map(ClusterPermissionToJSON)),
        'name': value.name,
        'remarks': value.remarks,
        'type_code': value.type_code,
        'api_server_url': value.api_server_url,
        'credential': value.credential,
        'state_code': value.state_code,
        'created_at': value.created_at,
        'updated_at': value.updated_at,
        'synchronized_at': value.synchronized_at,
    };
}

