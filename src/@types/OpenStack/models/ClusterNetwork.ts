/* tslint:disable */
/* eslint-disable */
/**
 * CDM-DisasterRecovery
 * 설명추가
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Cluster } from './Cluster';
import {
    ClusterFromJSON,
    ClusterFromJSONTyped,
    ClusterToJSON,
} from './Cluster';
import type { ClusterFloatingIP } from './ClusterFloatingIP';
import {
    ClusterFloatingIPFromJSON,
    ClusterFloatingIPFromJSONTyped,
    ClusterFloatingIPToJSON,
} from './ClusterFloatingIP';
import type { ClusterSubnet } from './ClusterSubnet';
import {
    ClusterSubnetFromJSON,
    ClusterSubnetFromJSONTyped,
    ClusterSubnetToJSON,
} from './ClusterSubnet';
import type { ClusterTenant } from './ClusterTenant';
import {
    ClusterTenantFromJSON,
    ClusterTenantFromJSONTyped,
    ClusterTenantToJSON,
} from './ClusterTenant';

/**
 * 클러스터 네트워크
 * @export
 * @interface ClusterNetwork
 */
export interface ClusterNetwork {
    /**
     * 클러스터 네트워크의 ID
     * @type {number}
     * @memberof ClusterNetwork
     */
    id?: number;
    /**
     * 
     * @type {Cluster}
     * @memberof ClusterNetwork
     */
    cluster?: Cluster;
    /**
     * 
     * @type {ClusterTenant}
     * @memberof ClusterNetwork
     */
    tenant?: ClusterTenant;
    /**
     * 네트워크 타입
     * @type {string}
     * @memberof ClusterNetwork
     */
    type_code?: ClusterNetworkTypeCodeEnum;
    /**
     * 클러스터에서의 네트워크 ID
     * @type {string}
     * @memberof ClusterNetwork
     */
    uuid?: string;
    /**
     * 클러스터 네트워크의 이름
     * @type {string}
     * @memberof ClusterNetwork
     */
    name?: string;
    /**
     * 클러스터 네트워크의 설명
     * @type {string}
     * @memberof ClusterNetwork
     */
    description?: string;
    /**
     * 외부 네트워크 여부
     * @type {boolean}
     * @memberof ClusterNetwork
     */
    external_flag?: boolean;
    /**
     * 네트워크 상태
     * @type {string}
     * @memberof ClusterNetwork
     */
    status?: ClusterNetworkStatusEnum;
    /**
     * 네트워크 상태
     * @type {string}
     * @memberof ClusterNetwork
     */
    state?: ClusterNetworkStateEnum;
    /**
     * 서브넷 목록
     * @type {Array<ClusterSubnet>}
     * @memberof ClusterNetwork
     */
    subnets?: Array<ClusterSubnet>;
    /**
     * FloatingIP 목록
     * @type {Array<ClusterFloatingIP>}
     * @memberof ClusterNetwork
     */
    floating_ips?: Array<ClusterFloatingIP>;
}


/**
 * @export
 */
export const ClusterNetworkTypeCodeEnum = {
    vlan: 'openstack.network.type.vlan',
    vxlan: 'openstack.network.type.vxlan',
    gre: 'openstack.network.type.gre',
    flat: 'openstack.network.type.flat',
    local: 'openstack.network.type.local'
} as const;
export type ClusterNetworkTypeCodeEnum = typeof ClusterNetworkTypeCodeEnum[keyof typeof ClusterNetworkTypeCodeEnum];

/**
 * @export
 */
export const ClusterNetworkStatusEnum = {
    active: 'ACTIVE',
    down: 'DOWN',
    build: 'BUILD',
    error: 'ERROR'
} as const;
export type ClusterNetworkStatusEnum = typeof ClusterNetworkStatusEnum[keyof typeof ClusterNetworkStatusEnum];

/**
 * @export
 */
export const ClusterNetworkStateEnum = {
    up: 'up',
    down: 'down'
} as const;
export type ClusterNetworkStateEnum = typeof ClusterNetworkStateEnum[keyof typeof ClusterNetworkStateEnum];


/**
 * Check if a given object implements the ClusterNetwork interface.
 */
export function instanceOfClusterNetwork(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ClusterNetworkFromJSON(json: any): ClusterNetwork {
    return ClusterNetworkFromJSONTyped(json, false);
}

export function ClusterNetworkFromJSONTyped(json: any, ignoreDiscriminator: boolean): ClusterNetwork {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'cluster': !exists(json, 'cluster') ? undefined : ClusterFromJSON(json['cluster']),
        'tenant': !exists(json, 'tenant') ? undefined : ClusterTenantFromJSON(json['tenant']),
        'type_code': !exists(json, 'type_code') ? undefined : json['type_code'],
        'uuid': !exists(json, 'uuid') ? undefined : json['uuid'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'external_flag': !exists(json, 'external_flag') ? undefined : json['external_flag'],
        'status': !exists(json, 'status') ? undefined : json['status'],
        'state': !exists(json, 'state') ? undefined : json['state'],
        'subnets': !exists(json, 'subnets') ? undefined : ((json['subnets'] as Array<any>).map(ClusterSubnetFromJSON)),
        'floating_ips': !exists(json, 'floating_ips') ? undefined : ((json['floating_ips'] as Array<any>).map(ClusterFloatingIPFromJSON)),
    };
}

export function ClusterNetworkToJSON(value?: ClusterNetwork | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'cluster': ClusterToJSON(value.cluster),
        'tenant': ClusterTenantToJSON(value.tenant),
        'type_code': value.type_code,
        'uuid': value.uuid,
        'name': value.name,
        'description': value.description,
        'external_flag': value.external_flag,
        'status': value.status,
        'state': value.state,
        'subnets': value.subnets === undefined ? undefined : ((value.subnets as Array<any>).map(ClusterSubnetToJSON)),
        'floating_ips': value.floating_ips === undefined ? undefined : ((value.floating_ips as Array<any>).map(ClusterFloatingIPToJSON)),
    };
}

