/* tslint:disable */
/* eslint-disable */
/**
 * CDM-DisasterRecovery
 * 설명추가
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ClusterNetwork } from './ClusterNetwork';
import {
    ClusterNetworkFromJSON,
    ClusterNetworkFromJSONTyped,
    ClusterNetworkToJSON,
} from './ClusterNetwork';
import type { ClusterNetworkRoutingInterface } from './ClusterNetworkRoutingInterface';
import {
    ClusterNetworkRoutingInterfaceFromJSON,
    ClusterNetworkRoutingInterfaceFromJSONTyped,
    ClusterNetworkRoutingInterfaceToJSON,
} from './ClusterNetworkRoutingInterface';
import type { ClusterRouter } from './ClusterRouter';
import {
    ClusterRouterFromJSON,
    ClusterRouterFromJSONTyped,
    ClusterRouterToJSON,
} from './ClusterRouter';
import type { Message } from './Message';
import {
    MessageFromJSON,
    MessageFromJSONTyped,
    MessageToJSON,
} from './Message';

/**
 * 라우터 복구계획
 * @export
 * @interface RouterRecoveryPlan
 */
export interface RouterRecoveryPlan {
    /**
     * 복구 유형 (미러링만 지원)
     * @type {string}
     * @memberof RouterRecoveryPlan
     */
    recovery_type_code?: RouterRecoveryPlanRecoveryTypeCodeEnum;
    /**
     * 
     * @type {ClusterRouter}
     * @memberof RouterRecoveryPlan
     */
    protection_cluster_router?: ClusterRouter;
    /**
     * 
     * @type {ClusterNetwork}
     * @memberof RouterRecoveryPlan
     */
    recovery_cluster_external_network?: ClusterNetwork;
    /**
     * 라우팅할 외부 네트워크 변경 필요 여부
     * @type {boolean}
     * @memberof RouterRecoveryPlan
     */
    recovery_cluster_external_network_update_flag?: boolean;
    /**
     * 
     * @type {Message}
     * @memberof RouterRecoveryPlan
     */
    recovery_cluster_external_network_update_reason?: Message;
    /**
     * 라우팅할 외부 네트워크로의 라우팅 인터페이스 목록
     * @type {Array<ClusterNetworkRoutingInterface>}
     * @memberof RouterRecoveryPlan
     */
    recovery_cluster_external_routing_interfaces?: Array<ClusterNetworkRoutingInterface>;
}


/**
 * @export
 */
export const RouterRecoveryPlanRecoveryTypeCodeEnum = {
    dr_recovery_plan_network_recovery_type_mirroring: 'dr.recovery.plan.network.recovery.type.mirroring'
} as const;
export type RouterRecoveryPlanRecoveryTypeCodeEnum = typeof RouterRecoveryPlanRecoveryTypeCodeEnum[keyof typeof RouterRecoveryPlanRecoveryTypeCodeEnum];


/**
 * Check if a given object implements the RouterRecoveryPlan interface.
 */
export function instanceOfRouterRecoveryPlan(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function RouterRecoveryPlanFromJSON(json: any): RouterRecoveryPlan {
    return RouterRecoveryPlanFromJSONTyped(json, false);
}

export function RouterRecoveryPlanFromJSONTyped(json: any, ignoreDiscriminator: boolean): RouterRecoveryPlan {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'recovery_type_code': !exists(json, 'recovery_type_code') ? undefined : json['recovery_type_code'],
        'protection_cluster_router': !exists(json, 'protection_cluster_router') ? undefined : ClusterRouterFromJSON(json['protection_cluster_router']),
        'recovery_cluster_external_network': !exists(json, 'recovery_cluster_external_network') ? undefined : ClusterNetworkFromJSON(json['recovery_cluster_external_network']),
        'recovery_cluster_external_network_update_flag': !exists(json, 'recovery_cluster_external_network_update_flag') ? undefined : json['recovery_cluster_external_network_update_flag'],
        'recovery_cluster_external_network_update_reason': !exists(json, 'recovery_cluster_external_network_update_reason') ? undefined : MessageFromJSON(json['recovery_cluster_external_network_update_reason']),
        'recovery_cluster_external_routing_interfaces': !exists(json, 'recovery_cluster_external_routing_interfaces') ? undefined : ((json['recovery_cluster_external_routing_interfaces'] as Array<any>).map(ClusterNetworkRoutingInterfaceFromJSON)),
    };
}

export function RouterRecoveryPlanToJSON(value?: RouterRecoveryPlan | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'recovery_type_code': value.recovery_type_code,
        'protection_cluster_router': ClusterRouterToJSON(value.protection_cluster_router),
        'recovery_cluster_external_network': ClusterNetworkToJSON(value.recovery_cluster_external_network),
        'recovery_cluster_external_network_update_flag': value.recovery_cluster_external_network_update_flag,
        'recovery_cluster_external_network_update_reason': MessageToJSON(value.recovery_cluster_external_network_update_reason),
        'recovery_cluster_external_routing_interfaces': value.recovery_cluster_external_routing_interfaces === undefined ? undefined : ((value.recovery_cluster_external_routing_interfaces as Array<any>).map(ClusterNetworkRoutingInterfaceToJSON)),
    };
}

