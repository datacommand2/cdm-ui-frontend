/* tslint:disable */
/* eslint-disable */
/**
 * CDM-DisasterRecovery
 * 설명추가
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ClusterNetworkRoutingInterface } from './ClusterNetworkRoutingInterface';
import {
    ClusterNetworkRoutingInterfaceFromJSON,
    ClusterNetworkRoutingInterfaceFromJSONTyped,
    ClusterNetworkRoutingInterfaceToJSON,
} from './ClusterNetworkRoutingInterface';
import type { ClusterRouterExtraRoute } from './ClusterRouterExtraRoute';
import {
    ClusterRouterExtraRouteFromJSON,
    ClusterRouterExtraRouteFromJSONTyped,
    ClusterRouterExtraRouteToJSON,
} from './ClusterRouterExtraRoute';
import type { ClusterTenant } from './ClusterTenant';
import {
    ClusterTenantFromJSON,
    ClusterTenantFromJSONTyped,
    ClusterTenantToJSON,
} from './ClusterTenant';

/**
 * 클러스터 네트워크 라우터
 * @export
 * @interface ClusterRouter
 */
export interface ClusterRouter {
    /**
     * 클러스터 네트워크 라우터의 ID
     * @type {number}
     * @memberof ClusterRouter
     */
    id?: number;
    /**
     * 
     * @type {ClusterTenant}
     * @memberof ClusterRouter
     */
    tenant?: ClusterTenant;
    /**
     * 클러스터에서의 네트워크 라우터 ID
     * @type {string}
     * @memberof ClusterRouter
     */
    uuid?: string;
    /**
     * 클러스터 라우터의 이름
     * @type {string}
     * @memberof ClusterRouter
     */
    name?: string;
    /**
     * 클러스터 라우터의 설명
     * @type {string}
     * @memberof ClusterRouter
     */
    description?: string;
    /**
     * 내부 네트워크로의 라우팅 인터페이스 목록
     * @type {Array<ClusterNetworkRoutingInterface>}
     * @memberof ClusterRouter
     */
    internal_routing_interfaces?: Array<ClusterNetworkRoutingInterface>;
    /**
     * 외부 네트워크로의 라우팅 인터페이스 목록
     * @type {Array<ClusterNetworkRoutingInterface>}
     * @memberof ClusterRouter
     */
    external_routing_interfaces?: Array<ClusterNetworkRoutingInterface>;
    /**
     * 추가 라우트 목록
     * @type {Array<ClusterRouterExtraRoute>}
     * @memberof ClusterRouter
     */
    extra_routes?: Array<ClusterRouterExtraRoute>;
    /**
     * 라우터 상태
     * @type {string}
     * @memberof ClusterRouter
     */
    status?: ClusterRouterStatusEnum;
    /**
     * 라우터 상태
     * @type {string}
     * @memberof ClusterRouter
     */
    state?: ClusterRouterStateEnum;
}


/**
 * @export
 */
export const ClusterRouterStatusEnum = {
    active: 'ACTIVE',
    down: 'DOWN',
    build: 'BUILD',
    error: 'ERROR'
} as const;
export type ClusterRouterStatusEnum = typeof ClusterRouterStatusEnum[keyof typeof ClusterRouterStatusEnum];

/**
 * @export
 */
export const ClusterRouterStateEnum = {
    up: 'up',
    down: 'down'
} as const;
export type ClusterRouterStateEnum = typeof ClusterRouterStateEnum[keyof typeof ClusterRouterStateEnum];


/**
 * Check if a given object implements the ClusterRouter interface.
 */
export function instanceOfClusterRouter(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ClusterRouterFromJSON(json: any): ClusterRouter {
    return ClusterRouterFromJSONTyped(json, false);
}

export function ClusterRouterFromJSONTyped(json: any, ignoreDiscriminator: boolean): ClusterRouter {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'tenant': !exists(json, 'tenant') ? undefined : ClusterTenantFromJSON(json['tenant']),
        'uuid': !exists(json, 'uuid') ? undefined : json['uuid'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'internal_routing_interfaces': !exists(json, 'internal_routing_interfaces') ? undefined : ((json['internal_routing_interfaces'] as Array<any>).map(ClusterNetworkRoutingInterfaceFromJSON)),
        'external_routing_interfaces': !exists(json, 'external_routing_interfaces') ? undefined : ((json['external_routing_interfaces'] as Array<any>).map(ClusterNetworkRoutingInterfaceFromJSON)),
        'extra_routes': !exists(json, 'extra_routes') ? undefined : ((json['extra_routes'] as Array<any>).map(ClusterRouterExtraRouteFromJSON)),
        'status': !exists(json, 'status') ? undefined : json['status'],
        'state': !exists(json, 'state') ? undefined : json['state'],
    };
}

export function ClusterRouterToJSON(value?: ClusterRouter | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'tenant': ClusterTenantToJSON(value.tenant),
        'uuid': value.uuid,
        'name': value.name,
        'description': value.description,
        'internal_routing_interfaces': value.internal_routing_interfaces === undefined ? undefined : ((value.internal_routing_interfaces as Array<any>).map(ClusterNetworkRoutingInterfaceToJSON)),
        'external_routing_interfaces': value.external_routing_interfaces === undefined ? undefined : ((value.external_routing_interfaces as Array<any>).map(ClusterNetworkRoutingInterfaceToJSON)),
        'extra_routes': value.extra_routes === undefined ? undefined : ((value.extra_routes as Array<any>).map(ClusterRouterExtraRouteToJSON)),
        'status': value.status,
        'state': value.state,
    };
}

