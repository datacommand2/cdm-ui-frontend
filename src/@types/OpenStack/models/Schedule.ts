/* tslint:disable */
/* eslint-disable */
/**
 * CDM-DisasterRecovery
 * 설명추가
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 스케쥴
 * @export
 * @interface Schedule
 */
export interface Schedule {
    /**
     * 활성화 여부
     * @type {boolean}
     * @memberof Schedule
     */
    activation_flag?: boolean;
    /**
     * 시작일
     * @type {number}
     * @memberof Schedule
     */
    start_at?: number;
    /**
     * 종료일
     * @type {number}
     * @memberof Schedule
     */
    end_at?: number;
    /**
     * 주기 종류
     * @type {string}
     * @memberof Schedule
     */
    type?: ScheduleTypeEnum;
    /**
     * 주기간격 (day)
     * @type {number}
     * @memberof Schedule
     */
    interval_day?: number;
    /**
     * 주기간격 (week)
     * @type {number}
     * @memberof Schedule
     */
    interval_week?: number;
    /**
     * 주기간격 (month)
     * @type {number}
     * @memberof Schedule
     */
    interval_month?: ScheduleIntervalMonthEnum;
    /**
     * 주 (#1-4 or L:마지막주)
     * @type {string}
     * @memberof Schedule
     */
    week_of_month?: ScheduleWeekOfMonthEnum;
    /**
     * 일자 (1-31 or L:말일)
     * @type {string}
     * @memberof Schedule
     */
    day_of_month?: ScheduleDayOfMonthEnum;
    /**
     * 요일
     * @type {string}
     * @memberof Schedule
     */
    day_of_week?: ScheduleDayOfWeekEnum;
    /**
     * 시
     * @type {number}
     * @memberof Schedule
     */
    hour?: number;
    /**
     * 분
     * @type {number}
     * @memberof Schedule
     */
    minute?: number;
    /**
     * [타임존](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
     * @type {string}
     * @memberof Schedule
     */
    timezone?: string;
}


/**
 * @export
 */
export const ScheduleTypeEnum = {
    specified: 'schedule.type.specified',
    daily: 'schedule.type.daily',
    weekly: 'schedule.type.weekly',
    day_of_monthly: 'schedule.type.day-of-monthly',
    week_of_monthly: 'schedule.type.week-of-monthly'
} as const;
export type ScheduleTypeEnum = typeof ScheduleTypeEnum[keyof typeof ScheduleTypeEnum];

/**
 * @export
 */
export const ScheduleIntervalMonthEnum = {
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_4: 4,
    NUMBER_6: 6,
    NUMBER_12: 12
} as const;
export type ScheduleIntervalMonthEnum = typeof ScheduleIntervalMonthEnum[keyof typeof ScheduleIntervalMonthEnum];

/**
 * @export
 */
export const ScheduleWeekOfMonthEnum = {
    _1: '#1',
    _2: '#2',
    _3: '#3',
    _4: '#4',
    _5: '#5',
    l: 'L'
} as const;
export type ScheduleWeekOfMonthEnum = typeof ScheduleWeekOfMonthEnum[keyof typeof ScheduleWeekOfMonthEnum];

/**
 * @export
 */
export const ScheduleDayOfMonthEnum = {
    _1: '1',
    _2: '2',
    _3: '3',
    _4: '4',
    _5: '5',
    _6: '6',
    _7: '7',
    _8: '8',
    _9: '9',
    _10: '10',
    _11: '11',
    _12: '12',
    _13: '13',
    _14: '14',
    _15: '15',
    _16: '16',
    _17: '17',
    _18: '18',
    _19: '19',
    _20: '20',
    _21: '21',
    _22: '22',
    _23: '23',
    _24: '24',
    _25: '25',
    _26: '26',
    _27: '27',
    _28: '28',
    _29: '29',
    _30: '30',
    _31: '31',
    l: 'L'
} as const;
export type ScheduleDayOfMonthEnum = typeof ScheduleDayOfMonthEnum[keyof typeof ScheduleDayOfMonthEnum];

/**
 * @export
 */
export const ScheduleDayOfWeekEnum = {
    mon: 'mon',
    tue: 'tue',
    wed: 'wed',
    thu: 'thu',
    fri: 'fri',
    sat: 'sat',
    sun: 'sun'
} as const;
export type ScheduleDayOfWeekEnum = typeof ScheduleDayOfWeekEnum[keyof typeof ScheduleDayOfWeekEnum];


/**
 * Check if a given object implements the Schedule interface.
 */
export function instanceOfSchedule(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ScheduleFromJSON(json: any): Schedule {
    return ScheduleFromJSONTyped(json, false);
}

export function ScheduleFromJSONTyped(json: any, ignoreDiscriminator: boolean): Schedule {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'activation_flag': !exists(json, 'activation_flag') ? undefined : json['activation_flag'],
        'start_at': !exists(json, 'start_at') ? undefined : json['start_at'],
        'end_at': !exists(json, 'end_at') ? undefined : json['end_at'],
        'type': !exists(json, 'type') ? undefined : json['type'],
        'interval_day': !exists(json, 'interval_day') ? undefined : json['interval_day'],
        'interval_week': !exists(json, 'interval_week') ? undefined : json['interval_week'],
        'interval_month': !exists(json, 'interval_month') ? undefined : json['interval_month'],
        'week_of_month': !exists(json, 'week_of_month') ? undefined : json['week_of_month'],
        'day_of_month': !exists(json, 'day_of_month') ? undefined : json['day_of_month'],
        'day_of_week': !exists(json, 'day_of_week') ? undefined : json['day_of_week'],
        'hour': !exists(json, 'hour') ? undefined : json['hour'],
        'minute': !exists(json, 'minute') ? undefined : json['minute'],
        'timezone': !exists(json, 'timezone') ? undefined : json['timezone'],
    };
}

export function ScheduleToJSON(value?: Schedule | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'activation_flag': value.activation_flag,
        'start_at': value.start_at,
        'end_at': value.end_at,
        'type': value.type,
        'interval_day': value.interval_day,
        'interval_week': value.interval_week,
        'interval_month': value.interval_month,
        'week_of_month': value.week_of_month,
        'day_of_month': value.day_of_month,
        'day_of_week': value.day_of_week,
        'hour': value.hour,
        'minute': value.minute,
        'timezone': value.timezone,
    };
}

