/* tslint:disable */
/* eslint-disable */
/**
 * CDM-DisasterRecovery
 * 설명추가
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Cluster } from './Cluster';
import {
    ClusterFromJSON,
    ClusterFromJSONTyped,
    ClusterToJSON,
} from './Cluster';
import type { ClusterStorage } from './ClusterStorage';
import {
    ClusterStorageFromJSON,
    ClusterStorageFromJSONTyped,
    ClusterStorageToJSON,
} from './ClusterStorage';
import type { ClusterTenant } from './ClusterTenant';
import {
    ClusterTenantFromJSON,
    ClusterTenantFromJSONTyped,
    ClusterTenantToJSON,
} from './ClusterTenant';
import type { ClusterVolumeSnapshot } from './ClusterVolumeSnapshot';
import {
    ClusterVolumeSnapshotFromJSON,
    ClusterVolumeSnapshotFromJSONTyped,
    ClusterVolumeSnapshotToJSON,
} from './ClusterVolumeSnapshot';

/**
 * 클러스터 볼륨
 * @export
 * @interface ClusterVolume
 */
export interface ClusterVolume {
    /**
     * 클러스터 볼륨의 ID
     * @type {number}
     * @memberof ClusterVolume
     */
    id?: number;
    /**
     * 
     * @type {Cluster}
     * @memberof ClusterVolume
     */
    cluster?: Cluster;
    /**
     * 
     * @type {ClusterTenant}
     * @memberof ClusterVolume
     */
    tenant?: ClusterTenant;
    /**
     * 
     * @type {ClusterStorage}
     * @memberof ClusterVolume
     */
    storage?: ClusterStorage;
    /**
     * 클러스터 볼륨 스냅샷 목록
     * @type {Array<ClusterVolumeSnapshot>}
     * @memberof ClusterVolume
     */
    snapshots?: Array<ClusterVolumeSnapshot>;
    /**
     * 클러스터에서의 볼륨 ID
     * @type {string}
     * @memberof ClusterVolume
     */
    uuid?: string;
    /**
     * 클러스터 볼륨의 이름
     * @type {string}
     * @memberof ClusterVolume
     */
    name?: string;
    /**
     * 클러스터 볼륨의 설명
     * @type {string}
     * @memberof ClusterVolume
     */
    description?: string;
    /**
     * 클러스터 볼륨의 용량
     * @type {number}
     * @memberof ClusterVolume
     */
    size_bytes?: number;
    /**
     * 공유 가능 여부
     * @type {boolean}
     * @memberof ClusterVolume
     */
    multiattach?: boolean;
    /**
     * 부팅 가능 여부
     * @type {boolean}
     * @memberof ClusterVolume
     */
    bootable?: boolean;
    /**
     * 읽기 전용 볼륨 여부
     * @type {boolean}
     * @memberof ClusterVolume
     */
    readonly?: boolean;
    /**
     * 볼륨 상태
     * @type {string}
     * @memberof ClusterVolume
     */
    status?: ClusterVolumeStatusEnum;
}


/**
 * @export
 */
export const ClusterVolumeStatusEnum = {
    available: 'available',
    error: 'error',
    creating: 'creating',
    deleting: 'deleting',
    in_use: 'in-use',
    attaching: 'attaching',
    detaching: 'detaching',
    error_deleting: 'error_deleting',
    maintenance: 'maintenance'
} as const;
export type ClusterVolumeStatusEnum = typeof ClusterVolumeStatusEnum[keyof typeof ClusterVolumeStatusEnum];


/**
 * Check if a given object implements the ClusterVolume interface.
 */
export function instanceOfClusterVolume(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ClusterVolumeFromJSON(json: any): ClusterVolume {
    return ClusterVolumeFromJSONTyped(json, false);
}

export function ClusterVolumeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ClusterVolume {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'cluster': !exists(json, 'cluster') ? undefined : ClusterFromJSON(json['cluster']),
        'tenant': !exists(json, 'tenant') ? undefined : ClusterTenantFromJSON(json['tenant']),
        'storage': !exists(json, 'storage') ? undefined : ClusterStorageFromJSON(json['storage']),
        'snapshots': !exists(json, 'snapshots') ? undefined : ((json['snapshots'] as Array<any>).map(ClusterVolumeSnapshotFromJSON)),
        'uuid': !exists(json, 'uuid') ? undefined : json['uuid'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'size_bytes': !exists(json, 'size_bytes') ? undefined : json['size_bytes'],
        'multiattach': !exists(json, 'multiattach') ? undefined : json['multiattach'],
        'bootable': !exists(json, 'bootable') ? undefined : json['bootable'],
        'readonly': !exists(json, 'readonly') ? undefined : json['readonly'],
        'status': !exists(json, 'status') ? undefined : json['status'],
    };
}

export function ClusterVolumeToJSON(value?: ClusterVolume | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'cluster': ClusterToJSON(value.cluster),
        'tenant': ClusterTenantToJSON(value.tenant),
        'storage': ClusterStorageToJSON(value.storage),
        'snapshots': value.snapshots === undefined ? undefined : ((value.snapshots as Array<any>).map(ClusterVolumeSnapshotToJSON)),
        'uuid': value.uuid,
        'name': value.name,
        'description': value.description,
        'size_bytes': value.size_bytes,
        'multiattach': value.multiattach,
        'bootable': value.bootable,
        'readonly': value.readonly,
        'status': value.status,
    };
}

