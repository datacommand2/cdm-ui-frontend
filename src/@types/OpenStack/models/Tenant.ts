/* tslint:disable */
/* eslint-disable */
/**
 * CDM-DisasterRecovery
 * 설명추가
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { TenantSolution } from './TenantSolution';
import {
    TenantSolutionFromJSON,
    TenantSolutionFromJSONTyped,
    TenantSolutionToJSON,
} from './TenantSolution';

/**
 * 테넌트
 * @export
 * @interface Tenant
 */
export interface Tenant {
    /**
     * 테넌트 ID
     * @type {number}
     * @memberof Tenant
     */
    id?: number;
    /**
     * 테넌트 이름
     * @type {string}
     * @memberof Tenant
     */
    name?: string;
    /**
     * 사용여부
     * @type {boolean}
     * @memberof Tenant
     */
    use_flag?: boolean;
    /**
     * 테넌트가 사용할 수 있는 솔루션 목록
     * @type {Array<TenantSolution>}
     * @memberof Tenant
     */
    solutions?: Array<TenantSolution>;
    /**
     * 비고
     * @type {string}
     * @memberof Tenant
     */
    remarks?: string;
    /**
     * 테넌트 생성 날짜
     * @type {number}
     * @memberof Tenant
     */
    created_at?: number;
    /**
     * 테넌트 변경 날짜
     * @type {number}
     * @memberof Tenant
     */
    updated_at?: number;
}

/**
 * Check if a given object implements the Tenant interface.
 */
export function instanceOfTenant(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function TenantFromJSON(json: any): Tenant {
    return TenantFromJSONTyped(json, false);
}

export function TenantFromJSONTyped(json: any, ignoreDiscriminator: boolean): Tenant {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'use_flag': !exists(json, 'use_flag') ? undefined : json['use_flag'],
        'solutions': !exists(json, 'solutions') ? undefined : ((json['solutions'] as Array<any>).map(TenantSolutionFromJSON)),
        'remarks': !exists(json, 'remarks') ? undefined : json['remarks'],
        'created_at': !exists(json, 'created_at') ? undefined : json['created_at'],
        'updated_at': !exists(json, 'updated_at') ? undefined : json['updated_at'],
    };
}

export function TenantToJSON(value?: Tenant | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'name': value.name,
        'use_flag': value.use_flag,
        'solutions': value.solutions === undefined ? undefined : ((value.solutions as Array<any>).map(TenantSolutionToJSON)),
        'remarks': value.remarks,
        'created_at': value.created_at,
        'updated_at': value.updated_at,
    };
}

