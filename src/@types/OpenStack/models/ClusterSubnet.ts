/* tslint:disable */
/* eslint-disable */
/**
 * CDM-DisasterRecovery
 * 설명추가
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ClusterSubnetDHCPPool } from './ClusterSubnetDHCPPool';
import {
    ClusterSubnetDHCPPoolFromJSON,
    ClusterSubnetDHCPPoolFromJSONTyped,
    ClusterSubnetDHCPPoolToJSON,
} from './ClusterSubnetDHCPPool';
import type { ClusterSubnetNameserver } from './ClusterSubnetNameserver';
import {
    ClusterSubnetNameserverFromJSON,
    ClusterSubnetNameserverFromJSONTyped,
    ClusterSubnetNameserverToJSON,
} from './ClusterSubnetNameserver';

/**
 * 클러스터 네트워크 서브넷
 * @export
 * @interface ClusterSubnet
 */
export interface ClusterSubnet {
    /**
     * 클러스터 네트워크 서브넷의 ID
     * @type {number}
     * @memberof ClusterSubnet
     */
    id?: number;
    /**
     * 클러스터에서의 네트워크 서브넷 ID
     * @type {string}
     * @memberof ClusterSubnet
     */
    uuid?: string;
    /**
     * 클러스터 네트워크 서브넷의 이름
     * @type {string}
     * @memberof ClusterSubnet
     */
    name?: string;
    /**
     * 클러스터 네트워크 서브넷의 설명
     * @type {string}
     * @memberof ClusterSubnet
     */
    description?: string;
    /**
     * 클러스터 네트워크 서브넷의 네트워크 CIDR
     * @type {string}
     * @memberof ClusterSubnet
     */
    network_cidr?: string;
    /**
     * DHCP 활성화 여부
     * @type {boolean}
     * @memberof ClusterSubnet
     */
    dhcp_enabled?: boolean;
    /**
     * DHCP 할당 범위 목록
     * @type {Array<ClusterSubnetDHCPPool>}
     * @memberof ClusterSubnet
     */
    dhcp_pools?: Array<ClusterSubnetDHCPPool>;
    /**
     * 게이트웨이 활성화 여부
     * @type {boolean}
     * @memberof ClusterSubnet
     */
    gateway_enabled?: boolean;
    /**
     * 게이트웨이 주소
     * @type {string}
     * @memberof ClusterSubnet
     */
    gateway_ip_address?: string;
    /**
     * ipv6 의 ip 주소 할당 방법
     * @type {string}
     * @memberof ClusterSubnet
     */
    ipv6_address_mode_code?: ClusterSubnetIpv6AddressModeCodeEnum;
    /**
     * ipv6 의 router advertisement 방법
     * @type {string}
     * @memberof ClusterSubnet
     */
    ipv6_ra_mode_code?: ClusterSubnetIpv6RaModeCodeEnum;
    /**
     * 클러스터 네트워크 서브넷의 Nameserver 목록
     * @type {Array<ClusterSubnetNameserver>}
     * @memberof ClusterSubnet
     */
    nameservers?: Array<ClusterSubnetNameserver>;
}


/**
 * @export
 */
export const ClusterSubnetIpv6AddressModeCodeEnum = {
    slaac: 'slaac',
    dhcpv6_stateful: 'dhcpv6-stateful',
    dhcpv6_stateless: 'dhcpv6-stateless'
} as const;
export type ClusterSubnetIpv6AddressModeCodeEnum = typeof ClusterSubnetIpv6AddressModeCodeEnum[keyof typeof ClusterSubnetIpv6AddressModeCodeEnum];

/**
 * @export
 */
export const ClusterSubnetIpv6RaModeCodeEnum = {
    slaac: 'slaac',
    dhcpv6_stateful: 'dhcpv6-stateful',
    dhcpv6_stateless: 'dhcpv6-stateless'
} as const;
export type ClusterSubnetIpv6RaModeCodeEnum = typeof ClusterSubnetIpv6RaModeCodeEnum[keyof typeof ClusterSubnetIpv6RaModeCodeEnum];


/**
 * Check if a given object implements the ClusterSubnet interface.
 */
export function instanceOfClusterSubnet(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ClusterSubnetFromJSON(json: any): ClusterSubnet {
    return ClusterSubnetFromJSONTyped(json, false);
}

export function ClusterSubnetFromJSONTyped(json: any, ignoreDiscriminator: boolean): ClusterSubnet {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'uuid': !exists(json, 'uuid') ? undefined : json['uuid'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'network_cidr': !exists(json, 'network_cidr') ? undefined : json['network_cidr'],
        'dhcp_enabled': !exists(json, 'dhcp_enabled') ? undefined : json['dhcp_enabled'],
        'dhcp_pools': !exists(json, 'dhcp_pools') ? undefined : ((json['dhcp_pools'] as Array<any>).map(ClusterSubnetDHCPPoolFromJSON)),
        'gateway_enabled': !exists(json, 'gateway_enabled') ? undefined : json['gateway_enabled'],
        'gateway_ip_address': !exists(json, 'gateway_ip_address') ? undefined : json['gateway_ip_address'],
        'ipv6_address_mode_code': !exists(json, 'ipv6_address_mode_code') ? undefined : json['ipv6_address_mode_code'],
        'ipv6_ra_mode_code': !exists(json, 'ipv6_ra_mode_code') ? undefined : json['ipv6_ra_mode_code'],
        'nameservers': !exists(json, 'nameservers') ? undefined : ((json['nameservers'] as Array<any>).map(ClusterSubnetNameserverFromJSON)),
    };
}

export function ClusterSubnetToJSON(value?: ClusterSubnet | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'uuid': value.uuid,
        'name': value.name,
        'description': value.description,
        'network_cidr': value.network_cidr,
        'dhcp_enabled': value.dhcp_enabled,
        'dhcp_pools': value.dhcp_pools === undefined ? undefined : ((value.dhcp_pools as Array<any>).map(ClusterSubnetDHCPPoolToJSON)),
        'gateway_enabled': value.gateway_enabled,
        'gateway_ip_address': value.gateway_ip_address,
        'ipv6_address_mode_code': value.ipv6_address_mode_code,
        'ipv6_ra_mode_code': value.ipv6_ra_mode_code,
        'nameservers': value.nameservers === undefined ? undefined : ((value.nameservers as Array<any>).map(ClusterSubnetNameserverToJSON)),
    };
}

