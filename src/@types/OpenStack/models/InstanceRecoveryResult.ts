/* tslint:disable */
/* eslint-disable */
/**
 * CDM-DisasterRecovery
 * 설명추가
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ClusterInstance } from './ClusterInstance';
import {
    ClusterInstanceFromJSON,
    ClusterInstanceFromJSONTyped,
    ClusterInstanceToJSON,
} from './ClusterInstance';
import type { Message } from './Message';
import {
    MessageFromJSON,
    MessageFromJSONTyped,
    MessageToJSON,
} from './Message';

/**
 * 
 * @export
 * @interface InstanceRecoveryResult
 */
export interface InstanceRecoveryResult {
    /**
     * 
     * @type {ClusterInstance}
     * @memberof InstanceRecoveryResult
     */
    protection_cluster_instance?: ClusterInstance;
    /**
     * 
     * @type {ClusterInstance}
     * @memberof InstanceRecoveryResult
     */
    recovery_cluster_instance?: ClusterInstance;
    /**
     * 데이터 시점 유형
     * @type {string}
     * @memberof InstanceRecoveryResult
     */
    recovery_point_type_code?: InstanceRecoveryResultRecoveryPointTypeCodeEnum;
    /**
     * 복구 데이터 시점
     * @type {number}
     * @memberof InstanceRecoveryResult
     */
    recovery_point?: number;
    /**
     * 재해복구시 기동 여부
     * @type {boolean}
     * @memberof InstanceRecoveryResult
     */
    auto_start_flag?: boolean;
    /**
     * 재해복구 기동 후 정상동작 확인 여부
     * @type {boolean}
     * @memberof InstanceRecoveryResult
     */
    diagnosis_flag?: boolean;
    /**
     * 재해복구 기동 후 정상동작 확인 방법
     * @type {string}
     * @memberof InstanceRecoveryResult
     */
    diagnosis_method_code?: InstanceRecoveryResultDiagnosisMethodCodeEnum;
    /**
     * 재해복구 기동 후 정상동작 확인 방법 데이터
     * @type {string}
     * @memberof InstanceRecoveryResult
     */
    diagnosis_method_data?: string;
    /**
     * 재해복구 기동 후 정상동작 확인 대기 시간
     * @type {number}
     * @memberof InstanceRecoveryResult
     */
    diagnosis_timeout?: number;
    /**
     * 의존하는 인스턴스 목록
     * @type {Array<ClusterInstance>}
     * @memberof InstanceRecoveryResult
     */
    dependencies?: Array<ClusterInstance>;
    /**
     * 복구 시작 일시
     * @type {number}
     * @memberof InstanceRecoveryResult
     */
    started_at?: number;
    /**
     * 복구 종료 일시
     * @type {number}
     * @memberof InstanceRecoveryResult
     */
    finished_at?: number;
    /**
     * 복구 결과
     * @type {string}
     * @memberof InstanceRecoveryResult
     */
    result_code?: InstanceRecoveryResultResultCodeEnum;
    /**
     * 
     * @type {Message}
     * @memberof InstanceRecoveryResult
     */
    failed_reason?: Message;
}


/**
 * @export
 */
export const InstanceRecoveryResultRecoveryPointTypeCodeEnum = {
    latest: 'dr.recovery.recovery_point.type.latest',
    latest_snapshot: 'dr.recovery.recovery_point.type.latest_snapshot',
    snapshot: 'dr.recovery.recovery_point.type.snapshot'
} as const;
export type InstanceRecoveryResultRecoveryPointTypeCodeEnum = typeof InstanceRecoveryResultRecoveryPointTypeCodeEnum[keyof typeof InstanceRecoveryResultRecoveryPointTypeCodeEnum];

/**
 * @export
 */
export const InstanceRecoveryResultDiagnosisMethodCodeEnum = {
    shell_script: 'dr.recovery.plan.instance.diagnosis.method.shell-script',
    port_scan: 'dr.recovery.plan.instance.diagnosis.method.port-scan',
    http_get: 'dr.recovery.plan.instance.diagnosis.method.http-get'
} as const;
export type InstanceRecoveryResultDiagnosisMethodCodeEnum = typeof InstanceRecoveryResultDiagnosisMethodCodeEnum[keyof typeof InstanceRecoveryResultDiagnosisMethodCodeEnum];

/**
 * @export
 */
export const InstanceRecoveryResultResultCodeEnum = {
    success: 'dr.recovery.instance.result.success',
    failed: 'dr.recovery.instance.result.failed',
    canceled: 'dr.recovery.instance.result.canceled'
} as const;
export type InstanceRecoveryResultResultCodeEnum = typeof InstanceRecoveryResultResultCodeEnum[keyof typeof InstanceRecoveryResultResultCodeEnum];


/**
 * Check if a given object implements the InstanceRecoveryResult interface.
 */
export function instanceOfInstanceRecoveryResult(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function InstanceRecoveryResultFromJSON(json: any): InstanceRecoveryResult {
    return InstanceRecoveryResultFromJSONTyped(json, false);
}

export function InstanceRecoveryResultFromJSONTyped(json: any, ignoreDiscriminator: boolean): InstanceRecoveryResult {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'protection_cluster_instance': !exists(json, 'protection_cluster_instance') ? undefined : ClusterInstanceFromJSON(json['protection_cluster_instance']),
        'recovery_cluster_instance': !exists(json, 'recovery_cluster_instance') ? undefined : ClusterInstanceFromJSON(json['recovery_cluster_instance']),
        'recovery_point_type_code': !exists(json, 'recovery_point_type_code') ? undefined : json['recovery_point_type_code'],
        'recovery_point': !exists(json, 'recovery_point') ? undefined : json['recovery_point'],
        'auto_start_flag': !exists(json, 'auto_start_flag') ? undefined : json['auto_start_flag'],
        'diagnosis_flag': !exists(json, 'diagnosis_flag') ? undefined : json['diagnosis_flag'],
        'diagnosis_method_code': !exists(json, 'diagnosis_method_code') ? undefined : json['diagnosis_method_code'],
        'diagnosis_method_data': !exists(json, 'diagnosis_method_data') ? undefined : json['diagnosis_method_data'],
        'diagnosis_timeout': !exists(json, 'diagnosis_timeout') ? undefined : json['diagnosis_timeout'],
        'dependencies': !exists(json, 'dependencies') ? undefined : ((json['dependencies'] as Array<any>).map(ClusterInstanceFromJSON)),
        'started_at': !exists(json, 'started_at') ? undefined : json['started_at'],
        'finished_at': !exists(json, 'finished_at') ? undefined : json['finished_at'],
        'result_code': !exists(json, 'result_code') ? undefined : json['result_code'],
        'failed_reason': !exists(json, 'failed_reason') ? undefined : MessageFromJSON(json['failed_reason']),
    };
}

export function InstanceRecoveryResultToJSON(value?: InstanceRecoveryResult | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'protection_cluster_instance': ClusterInstanceToJSON(value.protection_cluster_instance),
        'recovery_cluster_instance': ClusterInstanceToJSON(value.recovery_cluster_instance),
        'recovery_point_type_code': value.recovery_point_type_code,
        'recovery_point': value.recovery_point,
        'auto_start_flag': value.auto_start_flag,
        'diagnosis_flag': value.diagnosis_flag,
        'diagnosis_method_code': value.diagnosis_method_code,
        'diagnosis_method_data': value.diagnosis_method_data,
        'diagnosis_timeout': value.diagnosis_timeout,
        'dependencies': value.dependencies === undefined ? undefined : ((value.dependencies as Array<any>).map(ClusterInstanceToJSON)),
        'started_at': value.started_at,
        'finished_at': value.finished_at,
        'result_code': value.result_code,
        'failed_reason': MessageToJSON(value.failed_reason),
    };
}

