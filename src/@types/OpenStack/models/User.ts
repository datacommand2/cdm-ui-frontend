/* tslint:disable */
/* eslint-disable */
/**
 * CDM-DisasterRecovery
 * 설명추가
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Role } from './Role';
import {
    RoleFromJSON,
    RoleFromJSONTyped,
    RoleToJSON,
} from './Role';
import type { Session } from './Session';
import {
    SessionFromJSON,
    SessionFromJSONTyped,
    SessionToJSON,
} from './Session';
import type { Tenant } from './Tenant';
import {
    TenantFromJSON,
    TenantFromJSONTyped,
    TenantToJSON,
} from './Tenant';
import type { UserGroup } from './UserGroup';
import {
    UserGroupFromJSON,
    UserGroupFromJSONTyped,
    UserGroupToJSON,
} from './UserGroup';

/**
 * 사용자
 * @export
 * @interface User
 */
export interface User {
    /**
     * 사용자 ID
     * @type {number}
     * @memberof User
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    account?: string;
    /**
     * 
     * @type {Tenant}
     * @memberof User
     */
    tenant?: Tenant;
    /**
     * 솔루션별 역할
     * @type {Array<Role>}
     * @memberof User
     */
    roles?: Array<Role>;
    /**
     * 사용자 그룹 목록
     * @type {Array<UserGroup>}
     * @memberof User
     */
    groups?: Array<UserGroup>;
    /**
     * 사용자 타임존 ([참조링크](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones))
     * @type {string}
     * @memberof User
     */
    timezone?: string;
    /**
     * 사용자 언어셋 ([참조링크](https://en.wikipedia.org/wiki/ISO_639-3))
     * @type {string}
     * @memberof User
     */
    language_set?: UserLanguageSetEnum;
    /**
     * 사용자 이름
     * @type {string}
     * @memberof User
     */
    name?: string;
    /**
     * 사용자 부서
     * @type {string}
     * @memberof User
     */
    department?: string;
    /**
     * 사용자 직책
     * @type {string}
     * @memberof User
     */
    position?: string;
    /**
     * 사용자 이메일
     * @type {string}
     * @memberof User
     */
    email?: string;
    /**
     * 사용자 연락처
     * @type {string}
     * @memberof User
     */
    contact?: string;
    /**
     * 계정 암호 변경 날짜
     * @type {number}
     * @memberof User
     */
    password_updated_at?: number;
    /**
     * 계정 암호 변경 필요 여부
     * @type {boolean}
     * @memberof User
     */
    password_update_flag?: boolean;
    /**
     * 계정 마지막 로그인 날짜
     * @type {number}
     * @memberof User
     */
    last_logged_in_at?: number;
    /**
     * 계정 생성 날짜
     * @type {number}
     * @memberof User
     */
    created_at?: number;
    /**
     * 계정 내용 변경 날짜
     * @type {number}
     * @memberof User
     */
    updated_at?: number;
    /**
     * 
     * @type {Session}
     * @memberof User
     */
    session?: Session;
}


/**
 * @export
 */
export const UserLanguageSetEnum = {
    eng: 'eng',
    kor: 'kor'
} as const;
export type UserLanguageSetEnum = typeof UserLanguageSetEnum[keyof typeof UserLanguageSetEnum];


/**
 * Check if a given object implements the User interface.
 */
export function instanceOfUser(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function UserFromJSON(json: any): User {
    return UserFromJSONTyped(json, false);
}

export function UserFromJSONTyped(json: any, ignoreDiscriminator: boolean): User {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'account': !exists(json, 'account') ? undefined : json['account'],
        'tenant': !exists(json, 'tenant') ? undefined : TenantFromJSON(json['tenant']),
        'roles': !exists(json, 'roles') ? undefined : ((json['roles'] as Array<any>).map(RoleFromJSON)),
        'groups': !exists(json, 'groups') ? undefined : ((json['groups'] as Array<any>).map(UserGroupFromJSON)),
        'timezone': !exists(json, 'timezone') ? undefined : json['timezone'],
        'language_set': !exists(json, 'language_set') ? undefined : json['language_set'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'department': !exists(json, 'department') ? undefined : json['department'],
        'position': !exists(json, 'position') ? undefined : json['position'],
        'email': !exists(json, 'email') ? undefined : json['email'],
        'contact': !exists(json, 'contact') ? undefined : json['contact'],
        'password_updated_at': !exists(json, 'password_updated_at') ? undefined : json['password_updated_at'],
        'password_update_flag': !exists(json, 'password_update_flag') ? undefined : json['password_update_flag'],
        'last_logged_in_at': !exists(json, 'last_logged_in_at') ? undefined : json['last_logged_in_at'],
        'created_at': !exists(json, 'created_at') ? undefined : json['created_at'],
        'updated_at': !exists(json, 'updated_at') ? undefined : json['updated_at'],
        'session': !exists(json, 'session') ? undefined : SessionFromJSON(json['session']),
    };
}

export function UserToJSON(value?: User | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'account': value.account,
        'tenant': TenantToJSON(value.tenant),
        'roles': value.roles === undefined ? undefined : ((value.roles as Array<any>).map(RoleToJSON)),
        'groups': value.groups === undefined ? undefined : ((value.groups as Array<any>).map(UserGroupToJSON)),
        'timezone': value.timezone,
        'language_set': value.language_set,
        'name': value.name,
        'department': value.department,
        'position': value.position,
        'email': value.email,
        'contact': value.contact,
        'password_updated_at': value.password_updated_at,
        'password_update_flag': value.password_update_flag,
        'last_logged_in_at': value.last_logged_in_at,
        'created_at': value.created_at,
        'updated_at': value.updated_at,
        'session': SessionToJSON(value.session),
    };
}

