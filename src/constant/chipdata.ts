import i18n from '../libs/i18n/I18nConfig';

const t = i18n.t;
interface IChip {
    [key: string]: any;
}
export const chipText: IChip = {
    '': 'NONE',
    pending: '실행대기',
    none: 'NONE',
    loading: 'LOADING',
    'cluster.state.active': 'ACTIVE',
    'cluster.state.warning': 'WARNING',
    'cluster.state.inactive': 'INACTIVE',
    'cluster.state.loading': 'LOADING',
    'cluster.state.unknown': 'UNKNOWN',
    'cluster.sync.state.init': 'INIT',
    'cluster.sync.state.running': 'RUNNING',
    'cluster.sync.state.loading': 'LOADING',
    'cluster.sync.state.done': 'DONE',
    'cluster.sync.state.failed': 'FAILED',
    'cluster.sync.state.error': 'ERROR',
    'cluster.sync.state.unknown': 'UNKNOWN',
    'cluster.sync.state.none': 'INIT',
    'status_manager.state.unknown': 'UNKNOWN',
    'status_manager.state.connection_failed': 'CONN_FAILED',
    'status_manager.state.not_installed': 'NOT_INSTALLED',
    'status_manager.state.no_connection_info': 'NO_CONN_INFO',
    enabled: 'ENABLED',
    disabled: 'DISABLED',
    // available: 'ENABLED',
    unavailable: 'UNAVAILABLE',
    ENABLED: 'ENABLED',
    DISABLED: 'DISABLED',
    up: 'UP',
    down: 'DOWN',
    ACTIVE: 'ACTIVE',
    DOWN: 'DOWN',
    BUILD: 'BUILD',
    ERROR: 'ERROR',
    // plan 상태
    normal: 'NORMAL',
    emergency: 'EMERGENCY',
    critical: 'CRITICAL',
    // mirror 상태
    prepare: 'PREPARE',
    mirroring: 'MIRRORING',
    paused: 'PAUSED',
    stopped: 'STOPPED',
    warning: 'WARNING',
    // 인스턴스 전원 상태
    NOSTATE: 'NOSTATE',
    RUNNING: 'RUNNING',
    PAUSE: 'PAUSE',
    SHUTDOWN: 'SHUTDOWN',
    CRASHED: 'CRASHED',
    SUSPENDED: 'SUSPENDED',
    // 인스턴스 상태
    // ACTIVE:
    SHUTOFF: 'SHUTOFF',
    unknown: 'UNKNOWN',
    UNKNOWN: 'UNKNOWN',
    REBOOT: 'REBOOT',
    // 볼륨 상태
    available: 'AVAILABLE',
    error: 'ERROR',
    creating: 'CREATING',
    deleting: 'DELETING',
    'in-use': 'IN USE',
    attaching: 'ATTACHING',
    detaching: 'DETACHING',
    error_deleting: 'ERROR_DELETING',
    maintenance: 'MANITENANCE',
    // 보호그룹 상태
    'dr.protection.group.state.normal': 'NORMAL',
    'dr.protection.group.state.warning': 'WARNING',
    'dr.protection.group.state.critical': 'CRITICAL',
    'dr.protection.group.state.emergency': 'EMERGENCY',
    // 복구계획 상태
    'dr.recovery.plan.state.normal': 'NORMAL',
    'dr.recovery.plan.state.warning': 'WARNING',
    'dr.recovery.plan.state.critical': 'CRITICAL',
    'dr.recovery.plan.state.cancel': 'CANCEL',
    'dr.recovery.plan.state.emergency': 'EMERGENCY',
    'dr.recovery.plan.state.prepare': 'PREPARE',
    // 데이터 복제 상태
    'cdm.replicator.replication.state.preparing': '준비중',
    'cdm.replicator.replication.state.normal': '복제중',
    'cdm.replicator.replication.state.error': '에러',
    'cdm.replicator.replication.state.done': '복제 완료',
    // 복구작업 상태
    'dr.recovery.job.state.running': t('BADGE.RUNNING'),
    'dr.recovery.job.state.canceling': t('BADGE.CANCELING'),
    'dr.recovery.job.state.pending': t('BADGE.PENDING'),
    'dr.recovery.job.state.waiting': t('BADGE.WAITING'),
    'dr.recovery.job.state.paused': t('BADGE.PAUSED'),
    'dr.recovery.job.state.clearing': t('BADGE.CLEARING'),
    'dr.recovery.job.state.reporting': t('BADGE.REPORTING'),
    'dr.recovery.job.state.completed': t('BADGE.COMPLETED'),
    'dr.recovery.job.state.clear-failed': t('BADGE.CLEAR_FAILED'),
    'dr.recovery.job.state.finished': t('BADGE.FINISHED'),
    // 복구작업 인스턴스 탭 상태
    'dr.recovery.job.instance.state.excepted': t('BADGE.EXCEPTED'),
    'dr.recovery.job.instance.state.ignored': t('BADGE.IGNORED'),
    'dr.recovery.job.instance.state.preparing': t('BADGE.PREPARING'),
    'dr.recovery.job.instance.state.ready': t('BADGE.READY'),
    'dr.recovery.job.instance.state.booting': t('BADGE.BOOTING'),
    'dr.recovery.job.instance.state.diagnosing': t('BADGE.DIAGNOSING'),
    'dr.recovery.job.instance.state.success': t('DR.SUCCESS'),
    'dr.recovery.job.instance.state.failed': t('BADGE.WARNING'),
    'dr.recovery.job.instance.state.canceled': t('GLOBAL.CANCEL'),
    // 복구결과 인스턴스 탭 상태
    'dr.recovery.instance.result.warning': t('BADGE.WARNING'),
    'dr.recovery.instance.result.success': t('DR.SUCCESS'),
    'dr.recovery.instance.result.failed': t('DR.FAIL'),
    // 복구작업 볼륨 상태
    'dr.recovery.job.volume.state.excepted': t('BADGE.EXCEPTED'),
    'dr.recovery.job.volume.state.ignored': t('BADGE.IGNORED'),
    'dr.recovery.job.volume.state.preparing': t('BADGE.PREPARING'),
    'dr.recovery.job.volume.state.ready': t('BADGE.READY'),
    'dr.recovery.job.volume.state.booting': t('BADGE.BOOTING'),
    'dr.recovery.job.volume.state.diagnosing': t('BADGE.DIAGNOSING'),
    'dr.recovery.job.volume.state.success': t('DR.SUCCESS'),
    'dr.recovery.job.volume.state.failed': t('BADGE.WARNING'),
    // 복구결과 볼륨 상태
    'dr.recovery.volume.result.success': t('DR.SUCCESS'),
    'dr.recovery.volume.result.excepted': t('BADGE.excepted'),
    'dr.recovery.volume.result.failed': t('DR.FAIL'),
    // 복구결과
    'dr.recovery.result.success': t('DR.SUCCESS'),
    'dr.recovery.result.partial_success': t('DR.PARTIAL_SUCCESS'),
    'dr.recovery.result.failed': t('DR.FAILED'),
    'dr.recovery.result.canceled': t('GLOBAL.CANCEL'),
    'user.login': 'LOGIN',
    'user.logout': 'LOGOUT',
    // 이벤트 레벨
    fatal: 'FATAL',
    // error: 'ERROR',
    warn: 'WARN',
    info: 'INFO',
    debug: 'DEBUG',
    trace: 'TRACE',
    excepted: t('BADGE.EXCEPTED'),
    ignored: t('BADGE.IGNORED'),
    preparing: t('BADGE.PREPARING'),
    ready: t('BADGE.READY'),
    booting: t('BADGE.BOOTING'),
    diagnosing: t('BADGE.DIAGNOSING'),
    success: t('DR.SUCCESS'),
    failed: t('BADGE.WARNING'),
    canceled: t('GLOBAL.CANCEL'),
    waiting: '대기중',
    running: '진행중',
    done: '완료',
};
// default
// info
// error
// success
// warning
// cancel
// secondary

export const chipColor: IChip = {
    none: 'default',
    loading: 'default',
    'cluster.state.active': 'primary',
    'cluster.state.warning': 'warning',
    'cluster.state.inactive': 'error',
    'cluster.state.loading': 'default',
    'cluster.state.unknown': 'default',
    'cluster.sync.state.init': 'default',
    'cluster.sync.state.running': 'success',
    'cluster.sync.state.loading': 'default',
    'cluster.sync.state.done': 'primary',
    'cluster.sync.state.failed': 'error',
    'cluster.sync.state.error': 'error',
    'cluster.sync.state.unknown': 'default',
    'cluster.sync.state.none': 'default',
    'status_manager.state.unknown': 'default',
    'status_manager.state.connection_failed': 'error',
    'status_manager.state.not_installed': 'warning',
    'status_manager.state.no_connection_info': 'warning',
    enabled: 'primary',
    disabled: 'default',
    unavailable: 'warning',
    ENABLED: 'primary',
    DISABLED: 'default',
    up: 'primary',
    down: 'default',
    ACTIVE: 'primary',
    DOWN: 'default',
    BUILD: 'default',
    ERROR: 'error',
    // 인스턴스 전원 상태
    NOSTATE: 'default',
    RUNNING: 'primary',
    PAUSE: 'default',
    SHUTDOWN: 'default',
    CRASHED: 'error',
    SUSPENDED: 'warning',
    // 인스턴스 상태
    // ACTIVE
    SHUTOFF: 'default',
    unknown: 'default',
    UNKNOWN: 'default',
    REBOOT: 'success',
    // 볼륨 상태
    available: 'primary',
    error: 'error',
    creating: 'success',
    deleting: 'warning',
    'in-use': 'primary',
    attaching: 'default',
    detaching: 'default',
    error_deleting: 'error',
    maintenance: 'primary',
    // 보호그룹 상태
    'dr.protection.group.state.normal': 'primary',
    'dr.protection.group.state.warning': 'warning',
    'dr.protection.group.state.critical': 'error',
    'dr.protection.group.state.emergency': 'error',
    // 복구계획 상태
    'dr.recovery.plan.state.normal': 'primary',
    'dr.recovery.plan.state.warning': 'warning',
    'dr.recovery.plan.state.critical': 'error',
    'dr.recovery.plan.state.cancel': 'cancel',
    'dr.recovery.plan.state.emergency': 'error',
    'dr.recovery.plan.state.prepare': 'default',
    // 데이터 복제 상태
    'cdm.replicator.replication.state.preparing': 'default',
    'cdm.replicator.replication.state.normal': 'primary',
    'cdm.replicator.replication.state.error': 'error',
    'cdm.replicator.replication.state.done': 'primary',
    // 복구작업 상태
    'dr.recovery.job.state.running': 'primary',
    'dr.recovery.job.state.canceling': 'default',
    'dr.recovery.job.state.pending': 'default',
    'dr.recovery.job.state.waiting': 'default',
    'dr.recovery.job.state.paused': 'secondary',
    'dr.recovery.job.state.clearing': 'success',
    'dr.recovery.job.state.reporting': 'success',
    'dr.recovery.job.state.completed': 'primary',
    'dr.recovery.job.state.clear-failed': 'error',
    'dr.recovery.job.state.finished': 'primary',
    // 복구작업 인스턴스 탭 상태
    'dr.recovery.job.instance.state.excepted': 'warning',
    'dr.recovery.job.instance.state.ignored': 'warning',
    'dr.recovery.job.instance.state.preparing': 'default',
    'dr.recovery.job.instance.state.ready': 'default',
    'dr.recovery.job.instance.state.booting': 'default',
    'dr.recovery.job.instance.state.diagnosing': 'default',
    'dr.recovery.job.instance.state.success': 'primary',
    'dr.recovery.job.instance.state.failed': 'error',
    'dr.recovery.job.instance.state.canceled': 'warning',
    // 복구결과 인스턴스 탭 상태
    'dr.recovery.instance.result.warning': 'warning',
    'dr.recovery.instance.result.success': 'primary',
    'dr.recovery.instance.result.failed': 'error',
    // 복구작업 볼륨 상태
    'dr.recovery.job.volume.state.excepted': 'warning',
    'dr.recovery.job.volume.state.ignored': 'warning',
    'dr.recovery.job.volume.state.preparing': 'default',
    'dr.recovery.job.volume.state.ready': 'default',
    'dr.recovery.job.volume.state.booting': 'default',
    'dr.recovery.job.volume.state.diagnosing': 'default',
    'dr.recovery.job.volume.state.success': 'primary',
    'dr.recovery.job.volume.state.failed': 'error',
    // 복구결과 볼륨 상태
    'dr.recovery.volume.result.success': 'primary',
    'dr.recovery.volume.result.excepted': 'warning',
    'dr.recovery.volume.result.failed': 'error',
    // 복구결과
    'dr.recovery.result.success': 'primary',
    'dr.recovery.result.partial_success': 'primary',
    'dr.recovery.result.failed': 'error',
    'dr.recovery.result.canceled': 'secondary',
    'user.login': 'primary',
    'user.logout': 'default',
    // 이벤트 레벨
    fatal: 'error',
    // error: 'ERROR',
    warn: 'warning',
    info: 'primary',
    debug: 'warning',
    trace: 'primary',
    excepted: 'warning',
    ignored: 'warning',
    preparing: 'default',
    // plan 상태
    normal: 'primary',
    emergency: 'error',
    critical: 'error',
    // mirror 상태
    prepare: 'default',
    mirroring: 'primary',
    paused: 'default',
    stopped: 'warning',
    warning: 'warning',
    ready: 'default',
    booting: 'default',
    diagnosing: 'default',
    success: 'primary',
    failed: 'error',
    canceled: 'warning',
    waiting: 'default',
    running: 'primary',
    done: 'primary',
};
